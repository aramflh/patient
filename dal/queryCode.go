// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

var (
	Q            = new(Query)
	DossierMed   *dossierMed
	Medecin      *medecin
	Medicament   *medicament
	Pathologie   *pathologie
	Patient      *patient
	Pharmacien   *pharmacien
	Prescription *prescription
	ProSante     *proSante
	SystemeAna   *systemeAna
	Traitement   *traitement
)

func SetDefault(db *gorm.DB, opts ...gen.DOOption) {
	*Q = *Use(db, opts...)
	DossierMed = &Q.DossierMed
	Medecin = &Q.Medecin
	Medicament = &Q.Medicament
	Pathologie = &Q.Pathologie
	Patient = &Q.Patient
	Pharmacien = &Q.Pharmacien
	Prescription = &Q.Prescription
	ProSante = &Q.ProSante
	SystemeAna = &Q.SystemeAna
	Traitement = &Q.Traitement
}

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:           db,
		DossierMed:   newDossierMed(db, opts...),
		Medecin:      newMedecin(db, opts...),
		Medicament:   newMedicament(db, opts...),
		Pathologie:   newPathologie(db, opts...),
		Patient:      newPatient(db, opts...),
		Pharmacien:   newPharmacien(db, opts...),
		Prescription: newPrescription(db, opts...),
		ProSante:     newProSante(db, opts...),
		SystemeAna:   newSystemeAna(db, opts...),
		Traitement:   newTraitement(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	DossierMed   dossierMed
	Medecin      medecin
	Medicament   medicament
	Pathologie   pathologie
	Patient      patient
	Pharmacien   pharmacien
	Prescription prescription
	ProSante     proSante
	SystemeAna   systemeAna
	Traitement   traitement
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:           db,
		DossierMed:   q.DossierMed.clone(db),
		Medecin:      q.Medecin.clone(db),
		Medicament:   q.Medicament.clone(db),
		Pathologie:   q.Pathologie.clone(db),
		Patient:      q.Patient.clone(db),
		Pharmacien:   q.Pharmacien.clone(db),
		Prescription: q.Prescription.clone(db),
		ProSante:     q.ProSante.clone(db),
		SystemeAna:   q.SystemeAna.clone(db),
		Traitement:   q.Traitement.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:           db,
		DossierMed:   q.DossierMed.replaceDB(db),
		Medecin:      q.Medecin.replaceDB(db),
		Medicament:   q.Medicament.replaceDB(db),
		Pathologie:   q.Pathologie.replaceDB(db),
		Patient:      q.Patient.replaceDB(db),
		Pharmacien:   q.Pharmacien.replaceDB(db),
		Prescription: q.Prescription.replaceDB(db),
		ProSante:     q.ProSante.replaceDB(db),
		SystemeAna:   q.SystemeAna.replaceDB(db),
		Traitement:   q.Traitement.replaceDB(db),
	}
}

type queryCtx struct {
	DossierMed   *dossierMedDo
	Medecin      *medecinDo
	Medicament   *medicamentDo
	Pathologie   *pathologieDo
	Patient      *patientDo
	Pharmacien   *pharmacienDo
	Prescription *prescriptionDo
	ProSante     *proSanteDo
	SystemeAna   *systemeAnaDo
	Traitement   *traitementDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		DossierMed:   q.DossierMed.WithContext(ctx),
		Medecin:      q.Medecin.WithContext(ctx),
		Medicament:   q.Medicament.WithContext(ctx),
		Pathologie:   q.Pathologie.WithContext(ctx),
		Patient:      q.Patient.WithContext(ctx),
		Pharmacien:   q.Pharmacien.WithContext(ctx),
		Prescription: q.Prescription.WithContext(ctx),
		ProSante:     q.ProSante.WithContext(ctx),
		SystemeAna:   q.SystemeAna.WithContext(ctx),
		Traitement:   q.Traitement.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
