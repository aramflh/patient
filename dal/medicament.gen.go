// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"patient/model"
)

func newMedicament(db *gorm.DB, opts ...gen.DOOption) medicament {
	_medicament := medicament{}

	_medicament.medicamentDo.UseDB(db, opts...)
	_medicament.medicamentDo.UseModel(&model.Medicament{})

	tableName := _medicament.medicamentDo.TableName()
	_medicament.ALL = field.NewAsterisk(tableName)
	_medicament.NomMedic = field.NewString(tableName, "nom_medic")
	_medicament.Dci = field.NewString(tableName, "dci")
	_medicament.Conditionnement = field.NewString(tableName, "conditionnement")
	_medicament.NomPathologie = field.NewString(tableName, "nom_pathologie")

	_medicament.fillFieldMap()

	return _medicament
}

type medicament struct {
	medicamentDo

	ALL             field.Asterisk
	NomMedic        field.String
	Dci             field.String
	Conditionnement field.String
	NomPathologie   field.String

	fieldMap map[string]field.Expr
}

func (m medicament) Table(newTableName string) *medicament {
	m.medicamentDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m medicament) As(alias string) *medicament {
	m.medicamentDo.DO = *(m.medicamentDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *medicament) updateTableName(table string) *medicament {
	m.ALL = field.NewAsterisk(table)
	m.NomMedic = field.NewString(table, "nom_medic")
	m.Dci = field.NewString(table, "dci")
	m.Conditionnement = field.NewString(table, "conditionnement")
	m.NomPathologie = field.NewString(table, "nom_pathologie")

	m.fillFieldMap()

	return m
}

func (m *medicament) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *medicament) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 4)
	m.fieldMap["nom_medic"] = m.NomMedic
	m.fieldMap["dci"] = m.Dci
	m.fieldMap["conditionnement"] = m.Conditionnement
	m.fieldMap["nom_pathologie"] = m.NomPathologie
}

func (m medicament) clone(db *gorm.DB) medicament {
	m.medicamentDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m medicament) replaceDB(db *gorm.DB) medicament {
	m.medicamentDo.ReplaceDB(db)
	return m
}

type medicamentDo struct{ gen.DO }

func (m medicamentDo) Debug() *medicamentDo {
	return m.withDO(m.DO.Debug())
}

func (m medicamentDo) WithContext(ctx context.Context) *medicamentDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m medicamentDo) ReadDB() *medicamentDo {
	return m.Clauses(dbresolver.Read)
}

func (m medicamentDo) WriteDB() *medicamentDo {
	return m.Clauses(dbresolver.Write)
}

func (m medicamentDo) Session(config *gorm.Session) *medicamentDo {
	return m.withDO(m.DO.Session(config))
}

func (m medicamentDo) Clauses(conds ...clause.Expression) *medicamentDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m medicamentDo) Returning(value interface{}, columns ...string) *medicamentDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m medicamentDo) Not(conds ...gen.Condition) *medicamentDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m medicamentDo) Or(conds ...gen.Condition) *medicamentDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m medicamentDo) Select(conds ...field.Expr) *medicamentDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m medicamentDo) Where(conds ...gen.Condition) *medicamentDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m medicamentDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *medicamentDo {
	return m.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (m medicamentDo) Order(conds ...field.Expr) *medicamentDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m medicamentDo) Distinct(cols ...field.Expr) *medicamentDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m medicamentDo) Omit(cols ...field.Expr) *medicamentDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m medicamentDo) Join(table schema.Tabler, on ...field.Expr) *medicamentDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m medicamentDo) LeftJoin(table schema.Tabler, on ...field.Expr) *medicamentDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m medicamentDo) RightJoin(table schema.Tabler, on ...field.Expr) *medicamentDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m medicamentDo) Group(cols ...field.Expr) *medicamentDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m medicamentDo) Having(conds ...gen.Condition) *medicamentDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m medicamentDo) Limit(limit int) *medicamentDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m medicamentDo) Offset(offset int) *medicamentDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m medicamentDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *medicamentDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m medicamentDo) Unscoped() *medicamentDo {
	return m.withDO(m.DO.Unscoped())
}

func (m medicamentDo) Create(values ...*model.Medicament) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m medicamentDo) CreateInBatches(values []*model.Medicament, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m medicamentDo) Save(values ...*model.Medicament) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m medicamentDo) First() (*model.Medicament, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Medicament), nil
	}
}

func (m medicamentDo) Take() (*model.Medicament, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Medicament), nil
	}
}

func (m medicamentDo) Last() (*model.Medicament, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Medicament), nil
	}
}

func (m medicamentDo) Find() ([]*model.Medicament, error) {
	result, err := m.DO.Find()
	return result.([]*model.Medicament), err
}

func (m medicamentDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Medicament, err error) {
	buf := make([]*model.Medicament, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m medicamentDo) FindInBatches(result *[]*model.Medicament, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m medicamentDo) Attrs(attrs ...field.AssignExpr) *medicamentDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m medicamentDo) Assign(attrs ...field.AssignExpr) *medicamentDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m medicamentDo) Joins(fields ...field.RelationField) *medicamentDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m medicamentDo) Preload(fields ...field.RelationField) *medicamentDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m medicamentDo) FirstOrInit() (*model.Medicament, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Medicament), nil
	}
}

func (m medicamentDo) FirstOrCreate() (*model.Medicament, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Medicament), nil
	}
}

func (m medicamentDo) FindByPage(offset int, limit int) (result []*model.Medicament, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m medicamentDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m medicamentDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m medicamentDo) Delete(models ...*model.Medicament) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *medicamentDo) withDO(do gen.Dao) *medicamentDo {
	m.DO = *do.(*gen.DO)
	return m
}
