// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"patient/model"
)

func newMedecin(db *gorm.DB, opts ...gen.DOOption) medecin {
	_medecin := medecin{}

	_medecin.medecinDo.UseDB(db, opts...)
	_medecin.medecinDo.UseModel(&model.Medecin{})

	tableName := _medecin.medecinDo.TableName()
	_medecin.ALL = field.NewAsterisk(tableName)
	_medecin.NInami = field.NewString(tableName, "n_inami")
	_medecin.Nom = field.NewString(tableName, "nom")
	_medecin.Prenom = field.NewString(tableName, "prenom")
	_medecin.AMail = field.NewString(tableName, "a_mail")
	_medecin.NTelephone = field.NewString(tableName, "n_telephone")
	_medecin.NInamiMed = field.NewString(tableName, "n_inami_med")
	_medecin.Specialite = field.NewString(tableName, "specialite")
	_medecin.NomSysAna = field.NewString(tableName, "nom_sys_ana")

	_medecin.fillFieldMap()

	return _medecin
}

type medecin struct {
	medecinDo medecinDo

	ALL        field.Asterisk
	NInami     field.String
	Nom        field.String
	Prenom     field.String
	AMail      field.String
	NTelephone field.String
	NInamiMed  field.String
	Specialite field.String
	NomSysAna  field.String

	fieldMap map[string]field.Expr
}

func (m medecin) Table(newTableName string) *medecin {
	m.medecinDo.UseTable(newTableName)
	return m.updateTableName(newTableName)
}

func (m medecin) As(alias string) *medecin {
	m.medecinDo.DO = *(m.medecinDo.As(alias).(*gen.DO))
	return m.updateTableName(alias)
}

func (m *medecin) updateTableName(table string) *medecin {
	m.ALL = field.NewAsterisk(table)
	m.NInami = field.NewString(table, "n_inami")
	m.Nom = field.NewString(table, "nom")
	m.Prenom = field.NewString(table, "prenom")
	m.AMail = field.NewString(table, "a_mail")
	m.NTelephone = field.NewString(table, "n_telephone")
	m.NInamiMed = field.NewString(table, "n_inami_med")
	m.Specialite = field.NewString(table, "specialite")
	m.NomSysAna = field.NewString(table, "nom_sys_ana")

	m.fillFieldMap()

	return m
}

func (m *medecin) WithContext(ctx context.Context) *medecinDo { return m.medecinDo.WithContext(ctx) }

func (m medecin) TableName() string { return m.medecinDo.TableName() }

func (m medecin) Alias() string { return m.medecinDo.Alias() }

func (m *medecin) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := m.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (m *medecin) fillFieldMap() {
	m.fieldMap = make(map[string]field.Expr, 8)
	m.fieldMap["n_inami"] = m.NInami
	m.fieldMap["nom"] = m.Nom
	m.fieldMap["prenom"] = m.Prenom
	m.fieldMap["a_mail"] = m.AMail
	m.fieldMap["n_telephone"] = m.NTelephone
	m.fieldMap["n_inami_med"] = m.NInamiMed
	m.fieldMap["specialite"] = m.Specialite
	m.fieldMap["nom_sys_ana"] = m.NomSysAna
}

func (m medecin) clone(db *gorm.DB) medecin {
	m.medecinDo.ReplaceConnPool(db.Statement.ConnPool)
	return m
}

func (m medecin) replaceDB(db *gorm.DB) medecin {
	m.medecinDo.ReplaceDB(db)
	return m
}

type medecinDo struct{ gen.DO }

func (m medecinDo) Debug() *medecinDo {
	return m.withDO(m.DO.Debug())
}

func (m medecinDo) WithContext(ctx context.Context) *medecinDo {
	return m.withDO(m.DO.WithContext(ctx))
}

func (m medecinDo) ReadDB() *medecinDo {
	return m.Clauses(dbresolver.Read)
}

func (m medecinDo) WriteDB() *medecinDo {
	return m.Clauses(dbresolver.Write)
}

func (m medecinDo) Session(config *gorm.Session) *medecinDo {
	return m.withDO(m.DO.Session(config))
}

func (m medecinDo) Clauses(conds ...clause.Expression) *medecinDo {
	return m.withDO(m.DO.Clauses(conds...))
}

func (m medecinDo) Returning(value interface{}, columns ...string) *medecinDo {
	return m.withDO(m.DO.Returning(value, columns...))
}

func (m medecinDo) Not(conds ...gen.Condition) *medecinDo {
	return m.withDO(m.DO.Not(conds...))
}

func (m medecinDo) Or(conds ...gen.Condition) *medecinDo {
	return m.withDO(m.DO.Or(conds...))
}

func (m medecinDo) Select(conds ...field.Expr) *medecinDo {
	return m.withDO(m.DO.Select(conds...))
}

func (m medecinDo) Where(conds ...gen.Condition) *medecinDo {
	return m.withDO(m.DO.Where(conds...))
}

func (m medecinDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *medecinDo {
	return m.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (m medecinDo) Order(conds ...field.Expr) *medecinDo {
	return m.withDO(m.DO.Order(conds...))
}

func (m medecinDo) Distinct(cols ...field.Expr) *medecinDo {
	return m.withDO(m.DO.Distinct(cols...))
}

func (m medecinDo) Omit(cols ...field.Expr) *medecinDo {
	return m.withDO(m.DO.Omit(cols...))
}

func (m medecinDo) Join(table schema.Tabler, on ...field.Expr) *medecinDo {
	return m.withDO(m.DO.Join(table, on...))
}

func (m medecinDo) LeftJoin(table schema.Tabler, on ...field.Expr) *medecinDo {
	return m.withDO(m.DO.LeftJoin(table, on...))
}

func (m medecinDo) RightJoin(table schema.Tabler, on ...field.Expr) *medecinDo {
	return m.withDO(m.DO.RightJoin(table, on...))
}

func (m medecinDo) Group(cols ...field.Expr) *medecinDo {
	return m.withDO(m.DO.Group(cols...))
}

func (m medecinDo) Having(conds ...gen.Condition) *medecinDo {
	return m.withDO(m.DO.Having(conds...))
}

func (m medecinDo) Limit(limit int) *medecinDo {
	return m.withDO(m.DO.Limit(limit))
}

func (m medecinDo) Offset(offset int) *medecinDo {
	return m.withDO(m.DO.Offset(offset))
}

func (m medecinDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *medecinDo {
	return m.withDO(m.DO.Scopes(funcs...))
}

func (m medecinDo) Unscoped() *medecinDo {
	return m.withDO(m.DO.Unscoped())
}

func (m medecinDo) Create(values ...*model.Medecin) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Create(values)
}

func (m medecinDo) CreateInBatches(values []*model.Medecin, batchSize int) error {
	return m.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (m medecinDo) Save(values ...*model.Medecin) error {
	if len(values) == 0 {
		return nil
	}
	return m.DO.Save(values)
}

func (m medecinDo) First() (*model.Medecin, error) {
	if result, err := m.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Medecin), nil
	}
}

func (m medecinDo) Take() (*model.Medecin, error) {
	if result, err := m.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Medecin), nil
	}
}

func (m medecinDo) Last() (*model.Medecin, error) {
	if result, err := m.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Medecin), nil
	}
}

func (m medecinDo) Find() ([]*model.Medecin, error) {
	result, err := m.DO.Find()
	return result.([]*model.Medecin), err
}

func (m medecinDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Medecin, err error) {
	buf := make([]*model.Medecin, 0, batchSize)
	err = m.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (m medecinDo) FindInBatches(result *[]*model.Medecin, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return m.DO.FindInBatches(result, batchSize, fc)
}

func (m medecinDo) Attrs(attrs ...field.AssignExpr) *medecinDo {
	return m.withDO(m.DO.Attrs(attrs...))
}

func (m medecinDo) Assign(attrs ...field.AssignExpr) *medecinDo {
	return m.withDO(m.DO.Assign(attrs...))
}

func (m medecinDo) Joins(fields ...field.RelationField) *medecinDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Joins(_f))
	}
	return &m
}

func (m medecinDo) Preload(fields ...field.RelationField) *medecinDo {
	for _, _f := range fields {
		m = *m.withDO(m.DO.Preload(_f))
	}
	return &m
}

func (m medecinDo) FirstOrInit() (*model.Medecin, error) {
	if result, err := m.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Medecin), nil
	}
}

func (m medecinDo) FirstOrCreate() (*model.Medecin, error) {
	if result, err := m.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Medecin), nil
	}
}

func (m medecinDo) FindByPage(offset int, limit int) (result []*model.Medecin, count int64, err error) {
	result, err = m.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = m.Offset(-1).Limit(-1).Count()
	return
}

func (m medecinDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = m.Count()
	if err != nil {
		return
	}

	err = m.Offset(offset).Limit(limit).Scan(result)
	return
}

func (m medecinDo) Scan(result interface{}) (err error) {
	return m.DO.Scan(result)
}

func (m medecinDo) Delete(models ...*model.Medecin) (result gen.ResultInfo, err error) {
	return m.DO.Delete(models)
}

func (m *medecinDo) withDO(do gen.Dao) *medecinDo {
	m.DO = *do.(*gen.DO)
	return m
}
