// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"patient/model"
)

func newSystemeAna(db *gorm.DB, opts ...gen.DOOption) systemeAna {
	_systemeAna := systemeAna{}

	_systemeAna.systemeAnaDo.UseDB(db, opts...)
	_systemeAna.systemeAnaDo.UseModel(&model.SystemeAna{})

	tableName := _systemeAna.systemeAnaDo.TableName()
	_systemeAna.ALL = field.NewAsterisk(tableName)
	_systemeAna.NomSysAna = field.NewString(tableName, "nom_sys_ana")
	_systemeAna.NomPathologie = field.NewString(tableName, "nom_pathologie")

	_systemeAna.fillFieldMap()

	return _systemeAna
}

type systemeAna struct {
	systemeAnaDo

	ALL           field.Asterisk
	NomSysAna     field.String
	NomPathologie field.String

	fieldMap map[string]field.Expr
}

func (s systemeAna) Table(newTableName string) *systemeAna {
	s.systemeAnaDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s systemeAna) As(alias string) *systemeAna {
	s.systemeAnaDo.DO = *(s.systemeAnaDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *systemeAna) updateTableName(table string) *systemeAna {
	s.ALL = field.NewAsterisk(table)
	s.NomSysAna = field.NewString(table, "nom_sys_ana")
	s.NomPathologie = field.NewString(table, "nom_pathologie")

	s.fillFieldMap()

	return s
}

func (s *systemeAna) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *systemeAna) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 2)
	s.fieldMap["nom_sys_ana"] = s.NomSysAna
	s.fieldMap["nom_pathologie"] = s.NomPathologie
}

func (s systemeAna) clone(db *gorm.DB) systemeAna {
	s.systemeAnaDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s systemeAna) replaceDB(db *gorm.DB) systemeAna {
	s.systemeAnaDo.ReplaceDB(db)
	return s
}

type systemeAnaDo struct{ gen.DO }

func (s systemeAnaDo) Debug() *systemeAnaDo {
	return s.withDO(s.DO.Debug())
}

func (s systemeAnaDo) WithContext(ctx context.Context) *systemeAnaDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s systemeAnaDo) ReadDB() *systemeAnaDo {
	return s.Clauses(dbresolver.Read)
}

func (s systemeAnaDo) WriteDB() *systemeAnaDo {
	return s.Clauses(dbresolver.Write)
}

func (s systemeAnaDo) Session(config *gorm.Session) *systemeAnaDo {
	return s.withDO(s.DO.Session(config))
}

func (s systemeAnaDo) Clauses(conds ...clause.Expression) *systemeAnaDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s systemeAnaDo) Returning(value interface{}, columns ...string) *systemeAnaDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s systemeAnaDo) Not(conds ...gen.Condition) *systemeAnaDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s systemeAnaDo) Or(conds ...gen.Condition) *systemeAnaDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s systemeAnaDo) Select(conds ...field.Expr) *systemeAnaDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s systemeAnaDo) Where(conds ...gen.Condition) *systemeAnaDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s systemeAnaDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *systemeAnaDo {
	return s.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (s systemeAnaDo) Order(conds ...field.Expr) *systemeAnaDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s systemeAnaDo) Distinct(cols ...field.Expr) *systemeAnaDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s systemeAnaDo) Omit(cols ...field.Expr) *systemeAnaDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s systemeAnaDo) Join(table schema.Tabler, on ...field.Expr) *systemeAnaDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s systemeAnaDo) LeftJoin(table schema.Tabler, on ...field.Expr) *systemeAnaDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s systemeAnaDo) RightJoin(table schema.Tabler, on ...field.Expr) *systemeAnaDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s systemeAnaDo) Group(cols ...field.Expr) *systemeAnaDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s systemeAnaDo) Having(conds ...gen.Condition) *systemeAnaDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s systemeAnaDo) Limit(limit int) *systemeAnaDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s systemeAnaDo) Offset(offset int) *systemeAnaDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s systemeAnaDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *systemeAnaDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s systemeAnaDo) Unscoped() *systemeAnaDo {
	return s.withDO(s.DO.Unscoped())
}

func (s systemeAnaDo) Create(values ...*model.SystemeAna) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s systemeAnaDo) CreateInBatches(values []*model.SystemeAna, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s systemeAnaDo) Save(values ...*model.SystemeAna) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s systemeAnaDo) First() (*model.SystemeAna, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemeAna), nil
	}
}

func (s systemeAnaDo) Take() (*model.SystemeAna, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemeAna), nil
	}
}

func (s systemeAnaDo) Last() (*model.SystemeAna, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemeAna), nil
	}
}

func (s systemeAnaDo) Find() ([]*model.SystemeAna, error) {
	result, err := s.DO.Find()
	return result.([]*model.SystemeAna), err
}

func (s systemeAnaDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SystemeAna, err error) {
	buf := make([]*model.SystemeAna, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s systemeAnaDo) FindInBatches(result *[]*model.SystemeAna, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s systemeAnaDo) Attrs(attrs ...field.AssignExpr) *systemeAnaDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s systemeAnaDo) Assign(attrs ...field.AssignExpr) *systemeAnaDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s systemeAnaDo) Joins(fields ...field.RelationField) *systemeAnaDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s systemeAnaDo) Preload(fields ...field.RelationField) *systemeAnaDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s systemeAnaDo) FirstOrInit() (*model.SystemeAna, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemeAna), nil
	}
}

func (s systemeAnaDo) FirstOrCreate() (*model.SystemeAna, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SystemeAna), nil
	}
}

func (s systemeAnaDo) FindByPage(offset int, limit int) (result []*model.SystemeAna, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s systemeAnaDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s systemeAnaDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s systemeAnaDo) Delete(models ...*model.SystemeAna) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *systemeAnaDo) withDO(do gen.Dao) *systemeAnaDo {
	s.DO = *do.(*gen.DO)
	return s
}
