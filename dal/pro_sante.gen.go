// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"patient/model"
)

func newProSante(db *gorm.DB, opts ...gen.DOOption) proSante {
	_proSante := proSante{}

	_proSante.proSanteDo.UseDB(db, opts...)
	_proSante.proSanteDo.UseModel(&model.ProSante{})

	tableName := _proSante.proSanteDo.TableName()
	_proSante.ALL = field.NewAsterisk(tableName)
	_proSante.NInami = field.NewString(tableName, "n_inami")
	_proSante.Nom = field.NewString(tableName, "nom")
	_proSante.Prenom = field.NewString(tableName, "prenom")
	_proSante.AMail = field.NewString(tableName, "a_mail")
	_proSante.NTelephone = field.NewString(tableName, "n_telephone")

	_proSante.fillFieldMap()

	return _proSante
}

type proSante struct {
	proSanteDo proSanteDo

	ALL        field.Asterisk
	NInami     field.String
	Nom        field.String
	Prenom     field.String
	AMail      field.String
	NTelephone field.String

	fieldMap map[string]field.Expr
}

func (p proSante) Table(newTableName string) *proSante {
	p.proSanteDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p proSante) As(alias string) *proSante {
	p.proSanteDo.DO = *(p.proSanteDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *proSante) updateTableName(table string) *proSante {
	p.ALL = field.NewAsterisk(table)
	p.NInami = field.NewString(table, "n_inami")
	p.Nom = field.NewString(table, "nom")
	p.Prenom = field.NewString(table, "prenom")
	p.AMail = field.NewString(table, "a_mail")
	p.NTelephone = field.NewString(table, "n_telephone")

	p.fillFieldMap()

	return p
}

func (p *proSante) WithContext(ctx context.Context) *proSanteDo { return p.proSanteDo.WithContext(ctx) }

func (p proSante) TableName() string { return p.proSanteDo.TableName() }

func (p proSante) Alias() string { return p.proSanteDo.Alias() }

func (p *proSante) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *proSante) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 5)
	p.fieldMap["n_inami"] = p.NInami
	p.fieldMap["nom"] = p.Nom
	p.fieldMap["prenom"] = p.Prenom
	p.fieldMap["a_mail"] = p.AMail
	p.fieldMap["n_telephone"] = p.NTelephone
}

func (p proSante) clone(db *gorm.DB) proSante {
	p.proSanteDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p proSante) replaceDB(db *gorm.DB) proSante {
	p.proSanteDo.ReplaceDB(db)
	return p
}

type proSanteDo struct{ gen.DO }

func (p proSanteDo) Debug() *proSanteDo {
	return p.withDO(p.DO.Debug())
}

func (p proSanteDo) WithContext(ctx context.Context) *proSanteDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p proSanteDo) ReadDB() *proSanteDo {
	return p.Clauses(dbresolver.Read)
}

func (p proSanteDo) WriteDB() *proSanteDo {
	return p.Clauses(dbresolver.Write)
}

func (p proSanteDo) Session(config *gorm.Session) *proSanteDo {
	return p.withDO(p.DO.Session(config))
}

func (p proSanteDo) Clauses(conds ...clause.Expression) *proSanteDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p proSanteDo) Returning(value interface{}, columns ...string) *proSanteDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p proSanteDo) Not(conds ...gen.Condition) *proSanteDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p proSanteDo) Or(conds ...gen.Condition) *proSanteDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p proSanteDo) Select(conds ...field.Expr) *proSanteDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p proSanteDo) Where(conds ...gen.Condition) *proSanteDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p proSanteDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *proSanteDo {
	return p.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (p proSanteDo) Order(conds ...field.Expr) *proSanteDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p proSanteDo) Distinct(cols ...field.Expr) *proSanteDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p proSanteDo) Omit(cols ...field.Expr) *proSanteDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p proSanteDo) Join(table schema.Tabler, on ...field.Expr) *proSanteDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p proSanteDo) LeftJoin(table schema.Tabler, on ...field.Expr) *proSanteDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p proSanteDo) RightJoin(table schema.Tabler, on ...field.Expr) *proSanteDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p proSanteDo) Group(cols ...field.Expr) *proSanteDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p proSanteDo) Having(conds ...gen.Condition) *proSanteDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p proSanteDo) Limit(limit int) *proSanteDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p proSanteDo) Offset(offset int) *proSanteDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p proSanteDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *proSanteDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p proSanteDo) Unscoped() *proSanteDo {
	return p.withDO(p.DO.Unscoped())
}

func (p proSanteDo) Create(values ...*model.ProSante) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p proSanteDo) CreateInBatches(values []*model.ProSante, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p proSanteDo) Save(values ...*model.ProSante) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p proSanteDo) First() (*model.ProSante, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProSante), nil
	}
}

func (p proSanteDo) Take() (*model.ProSante, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProSante), nil
	}
}

func (p proSanteDo) Last() (*model.ProSante, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProSante), nil
	}
}

func (p proSanteDo) Find() ([]*model.ProSante, error) {
	result, err := p.DO.Find()
	return result.([]*model.ProSante), err
}

func (p proSanteDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ProSante, err error) {
	buf := make([]*model.ProSante, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p proSanteDo) FindInBatches(result *[]*model.ProSante, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p proSanteDo) Attrs(attrs ...field.AssignExpr) *proSanteDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p proSanteDo) Assign(attrs ...field.AssignExpr) *proSanteDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p proSanteDo) Joins(fields ...field.RelationField) *proSanteDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p proSanteDo) Preload(fields ...field.RelationField) *proSanteDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p proSanteDo) FirstOrInit() (*model.ProSante, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProSante), nil
	}
}

func (p proSanteDo) FirstOrCreate() (*model.ProSante, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ProSante), nil
	}
}

func (p proSanteDo) FindByPage(offset int, limit int) (result []*model.ProSante, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p proSanteDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p proSanteDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p proSanteDo) Delete(models ...*model.ProSante) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *proSanteDo) withDO(do gen.Dao) *proSanteDo {
	p.DO = *do.(*gen.DO)
	return p
}
