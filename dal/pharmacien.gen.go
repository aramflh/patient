// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dal

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"patient/model"
)

func newPharmacien(db *gorm.DB, opts ...gen.DOOption) pharmacien {
	_pharmacien := pharmacien{}

	_pharmacien.pharmacienDo.UseDB(db, opts...)
	_pharmacien.pharmacienDo.UseModel(&model.Pharmacien{})

	tableName := _pharmacien.pharmacienDo.TableName()
	_pharmacien.ALL = field.NewAsterisk(tableName)
	_pharmacien.NInami = field.NewString(tableName, "n_inami")
	_pharmacien.Nom = field.NewString(tableName, "nom")
	_pharmacien.Prenom = field.NewString(tableName, "prenom")
	_pharmacien.AMail = field.NewString(tableName, "a_mail")
	_pharmacien.NTelephone = field.NewString(tableName, "n_telephone")
	_pharmacien.NInamiPha = field.NewString(tableName, "n_inami_pha")

	_pharmacien.fillFieldMap()

	return _pharmacien
}

type pharmacien struct {
	pharmacienDo

	ALL        field.Asterisk
	NInami     field.String
	Nom        field.String
	Prenom     field.String
	AMail      field.String
	NTelephone field.String
	NInamiPha  field.String

	fieldMap map[string]field.Expr
}

func (p pharmacien) Table(newTableName string) *pharmacien {
	p.pharmacienDo.UseTable(newTableName)
	return p.updateTableName(newTableName)
}

func (p pharmacien) As(alias string) *pharmacien {
	p.pharmacienDo.DO = *(p.pharmacienDo.As(alias).(*gen.DO))
	return p.updateTableName(alias)
}

func (p *pharmacien) updateTableName(table string) *pharmacien {
	p.ALL = field.NewAsterisk(table)
	p.NInami = field.NewString(table, "n_inami")
	p.Nom = field.NewString(table, "nom")
	p.Prenom = field.NewString(table, "prenom")
	p.AMail = field.NewString(table, "a_mail")
	p.NTelephone = field.NewString(table, "n_telephone")
	p.NInamiPha = field.NewString(table, "n_inami_pha")

	p.fillFieldMap()

	return p
}

func (p *pharmacien) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := p.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (p *pharmacien) fillFieldMap() {
	p.fieldMap = make(map[string]field.Expr, 6)
	p.fieldMap["n_inami"] = p.NInami
	p.fieldMap["nom"] = p.Nom
	p.fieldMap["prenom"] = p.Prenom
	p.fieldMap["a_mail"] = p.AMail
	p.fieldMap["n_telephone"] = p.NTelephone
	p.fieldMap["n_inami_pha"] = p.NInamiPha
}

func (p pharmacien) clone(db *gorm.DB) pharmacien {
	p.pharmacienDo.ReplaceConnPool(db.Statement.ConnPool)
	return p
}

func (p pharmacien) replaceDB(db *gorm.DB) pharmacien {
	p.pharmacienDo.ReplaceDB(db)
	return p
}

type pharmacienDo struct{ gen.DO }

func (p pharmacienDo) Debug() *pharmacienDo {
	return p.withDO(p.DO.Debug())
}

func (p pharmacienDo) WithContext(ctx context.Context) *pharmacienDo {
	return p.withDO(p.DO.WithContext(ctx))
}

func (p pharmacienDo) ReadDB() *pharmacienDo {
	return p.Clauses(dbresolver.Read)
}

func (p pharmacienDo) WriteDB() *pharmacienDo {
	return p.Clauses(dbresolver.Write)
}

func (p pharmacienDo) Session(config *gorm.Session) *pharmacienDo {
	return p.withDO(p.DO.Session(config))
}

func (p pharmacienDo) Clauses(conds ...clause.Expression) *pharmacienDo {
	return p.withDO(p.DO.Clauses(conds...))
}

func (p pharmacienDo) Returning(value interface{}, columns ...string) *pharmacienDo {
	return p.withDO(p.DO.Returning(value, columns...))
}

func (p pharmacienDo) Not(conds ...gen.Condition) *pharmacienDo {
	return p.withDO(p.DO.Not(conds...))
}

func (p pharmacienDo) Or(conds ...gen.Condition) *pharmacienDo {
	return p.withDO(p.DO.Or(conds...))
}

func (p pharmacienDo) Select(conds ...field.Expr) *pharmacienDo {
	return p.withDO(p.DO.Select(conds...))
}

func (p pharmacienDo) Where(conds ...gen.Condition) *pharmacienDo {
	return p.withDO(p.DO.Where(conds...))
}

func (p pharmacienDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *pharmacienDo {
	return p.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (p pharmacienDo) Order(conds ...field.Expr) *pharmacienDo {
	return p.withDO(p.DO.Order(conds...))
}

func (p pharmacienDo) Distinct(cols ...field.Expr) *pharmacienDo {
	return p.withDO(p.DO.Distinct(cols...))
}

func (p pharmacienDo) Omit(cols ...field.Expr) *pharmacienDo {
	return p.withDO(p.DO.Omit(cols...))
}

func (p pharmacienDo) Join(table schema.Tabler, on ...field.Expr) *pharmacienDo {
	return p.withDO(p.DO.Join(table, on...))
}

func (p pharmacienDo) LeftJoin(table schema.Tabler, on ...field.Expr) *pharmacienDo {
	return p.withDO(p.DO.LeftJoin(table, on...))
}

func (p pharmacienDo) RightJoin(table schema.Tabler, on ...field.Expr) *pharmacienDo {
	return p.withDO(p.DO.RightJoin(table, on...))
}

func (p pharmacienDo) Group(cols ...field.Expr) *pharmacienDo {
	return p.withDO(p.DO.Group(cols...))
}

func (p pharmacienDo) Having(conds ...gen.Condition) *pharmacienDo {
	return p.withDO(p.DO.Having(conds...))
}

func (p pharmacienDo) Limit(limit int) *pharmacienDo {
	return p.withDO(p.DO.Limit(limit))
}

func (p pharmacienDo) Offset(offset int) *pharmacienDo {
	return p.withDO(p.DO.Offset(offset))
}

func (p pharmacienDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *pharmacienDo {
	return p.withDO(p.DO.Scopes(funcs...))
}

func (p pharmacienDo) Unscoped() *pharmacienDo {
	return p.withDO(p.DO.Unscoped())
}

func (p pharmacienDo) Create(values ...*model.Pharmacien) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Create(values)
}

func (p pharmacienDo) CreateInBatches(values []*model.Pharmacien, batchSize int) error {
	return p.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (p pharmacienDo) Save(values ...*model.Pharmacien) error {
	if len(values) == 0 {
		return nil
	}
	return p.DO.Save(values)
}

func (p pharmacienDo) First() (*model.Pharmacien, error) {
	if result, err := p.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Pharmacien), nil
	}
}

func (p pharmacienDo) Take() (*model.Pharmacien, error) {
	if result, err := p.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Pharmacien), nil
	}
}

func (p pharmacienDo) Last() (*model.Pharmacien, error) {
	if result, err := p.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Pharmacien), nil
	}
}

func (p pharmacienDo) Find() ([]*model.Pharmacien, error) {
	result, err := p.DO.Find()
	return result.([]*model.Pharmacien), err
}

func (p pharmacienDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Pharmacien, err error) {
	buf := make([]*model.Pharmacien, 0, batchSize)
	err = p.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (p pharmacienDo) FindInBatches(result *[]*model.Pharmacien, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return p.DO.FindInBatches(result, batchSize, fc)
}

func (p pharmacienDo) Attrs(attrs ...field.AssignExpr) *pharmacienDo {
	return p.withDO(p.DO.Attrs(attrs...))
}

func (p pharmacienDo) Assign(attrs ...field.AssignExpr) *pharmacienDo {
	return p.withDO(p.DO.Assign(attrs...))
}

func (p pharmacienDo) Joins(fields ...field.RelationField) *pharmacienDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Joins(_f))
	}
	return &p
}

func (p pharmacienDo) Preload(fields ...field.RelationField) *pharmacienDo {
	for _, _f := range fields {
		p = *p.withDO(p.DO.Preload(_f))
	}
	return &p
}

func (p pharmacienDo) FirstOrInit() (*model.Pharmacien, error) {
	if result, err := p.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Pharmacien), nil
	}
}

func (p pharmacienDo) FirstOrCreate() (*model.Pharmacien, error) {
	if result, err := p.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Pharmacien), nil
	}
}

func (p pharmacienDo) FindByPage(offset int, limit int) (result []*model.Pharmacien, count int64, err error) {
	result, err = p.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = p.Offset(-1).Limit(-1).Count()
	return
}

func (p pharmacienDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = p.Count()
	if err != nil {
		return
	}

	err = p.Offset(offset).Limit(limit).Scan(result)
	return
}

func (p pharmacienDo) Scan(result interface{}) (err error) {
	return p.DO.Scan(result)
}

func (p pharmacienDo) Delete(models ...*model.Pharmacien) (result gen.ResultInfo, err error) {
	return p.DO.Delete(models)
}

func (p *pharmacienDo) withDO(do gen.Dao) *pharmacienDo {
	p.DO = *do.(*gen.DO)
	return p
}
